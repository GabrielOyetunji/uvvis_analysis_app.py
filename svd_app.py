{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "000be778-0739-4013-9d51-39ae05344433",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.linalg import svd\n",
    "\n",
    "# Load data\n",
    "@st.cache_data\n",
    "def load_data(file):\n",
    "    df = pd.read_csv(file)\n",
    "    return df\n",
    "\n",
    "# Upload CSV\n",
    "st.title(\"UV-Vis Kinetics Analysis Tool\")\n",
    "uploaded_file = st.file_uploader(\"Upload CSV data\", type=\"csv\")\n",
    "if uploaded_file is not None:\n",
    "    assay_df = load_data(uploaded_file)\n",
    "    assay_df = assay_df.drop(index=0).reset_index(drop=True)\n",
    "\n",
    "    # Build test_matrix\n",
    "    absorbance_data = []\n",
    "    for i in range(1, assay_df.shape[1], 2):\n",
    "        col_values = pd.to_numeric(assay_df.iloc[:, i], errors='coerce')\n",
    "        absorbance_data.append(col_values.values)\n",
    "    test_matrix = np.array(absorbance_data).T\n",
    "\n",
    "    # Wavelength data\n",
    "    wavelengths = pd.to_numeric(assay_df.iloc[:, 0], errors='coerce').values\n",
    "\n",
    "    # Sidebar controls\n",
    "    st.sidebar.header(\"Parameters\")\n",
    "    min_wl = st.sidebar.number_input(\"Min Wavelength\", value=400)\n",
    "    max_wl = st.sidebar.number_input(\"Max Wavelength\", value=700)\n",
    "    index0 = st.sidebar.number_input(\"Start Scan Index\", value=100, step=1)\n",
    "    index1 = st.sidebar.number_input(\"Number of Scans\", value=15, step=1)\n",
    "    k = st.sidebar.slider(\"Number of SVD Components\", 1, 20, 5)\n",
    "\n",
    "    # Slice wavelength range\n",
    "    rows_in_range = np.where((wavelengths >= min_wl) & (wavelengths <= max_wl))[0]\n",
    "    test_matrix_sliced = test_matrix[rows_in_range, :]\n",
    "\n",
    "    # Apply SVD\n",
    "    U, s, Vt = svd(test_matrix_sliced, full_matrices=False)\n",
    "\n",
    "    def reconstruct_svd(U, s, Vt, k):\n",
    "        S_k = np.diag(s[:k])\n",
    "        U_k = U[:, :k]\n",
    "        Vt_k = Vt[:k, :]\n",
    "        return U_k @ S_k @ Vt_k\n",
    "\n",
    "    filtered_matrix = reconstruct_svd(U, s, Vt, k)\n",
    "\n",
    "    # Time slice\n",
    "    index_end = index0 + index1\n",
    "    slice_original = test_matrix_sliced[index0:index_end, :]\n",
    "    slice_filtered = filtered_matrix[index0:index_end, :]\n",
    "    residual = slice_original - slice_filtered\n",
    "\n",
    "    # Plots\n",
    "    st.subheader(\"Matrix Comparison\")\n",
    "    fig, axes = plt.subplots(1, 3, figsize=(15, 5))\n",
    "    axes[0].imshow(slice_original, aspect='auto', cmap='viridis')\n",
    "    axes[0].set_title('Original Slice')\n",
    "    axes[1].imshow(slice_filtered, aspect='auto', cmap='viridis')\n",
    "    axes[1].set_title('Filtered Slice')\n",
    "    axes[2].imshow(residual, aspect='auto', cmap='bwr')\n",
    "    axes[2].set_title('Residual')\n",
    "    st.pyplot(fig)\n",
    "\n",
    "    # Autocorrelation\n",
    "    def autocorr(vec):\n",
    "        return np.sum(vec[:-1] * vec[1:])\n",
    "\n",
    "    u_autocorr = [autocorr(U[:, i]) for i in range(k)]\n",
    "    v_autocorr = [autocorr(Vt[i, :]) for i in range(k)]\n",
    "\n",
    "    st.subheader(\"Autocorrelation\")\n",
    "    st.write(\"U Components:\", u_autocorr)\n",
    "    st.write(\"V Components:\", v_autocorr)\n",
    "\n",
    "    # Download buttons\n",
    "    st.subheader(\"Download Results\")\n",
    "    st.download_button(\"Download Filtered Matrix\", data=pd.DataFrame(filtered_matrix).to_csv(index=False), file_name=\"filtered_matrix.csv\")\n",
    "    st.download_button(\"Download Residual\", data=pd.DataFrame(residual).to_csv(index=False), file_name=\"residual.csv\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
